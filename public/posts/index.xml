<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on NightlyDev</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on NightlyDev</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 30 Jun 2024 00:57:02 +0200</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>[NDN] Transcript audio to text using OpenAI Whisper</title>
            <link>http://localhost:1313/posts/gpt-audio-transcript/</link>
            <pubDate>Sun, 30 Jun 2024 00:57:02 +0200</pubDate>
            
            <guid>http://localhost:1313/posts/gpt-audio-transcript/</guid>
            <description>Hi there 游놓!</description>
            <content type="html"><![CDATA[<p>Hi there 游놓!</p>
]]></content>
        </item>
        
        <item>
            <title>[NDN] Building a simple CRUD using GraphQL</title>
            <link>http://localhost:1313/posts/crud-graphql/</link>
            <pubDate>Thu, 20 Jun 2024 23:57:02 +0200</pubDate>
            
            <guid>http://localhost:1313/posts/crud-graphql/</guid>
            <description>Hi there 游놓!
In this article I wanted to play around and experiment with using GraphQL. And so, I made the simplest CRUD application I could came up with, a TODO list.
So&amp;hellip; GraphQL&amp;hellip; right? In case you don&amp;rsquo;t know, GraphQL is a query language for APIs that allows clients to request exactly the data they need. It provides efficient, flexible, and precise data fetching compared to traditional REST APIs.</description>
            <content type="html"><![CDATA[<p>Hi there 游놓!</p>
<p>In this article I wanted to play around and experiment with using <strong>GraphQL</strong>. And so, I made the simplest CRUD application I could came up with, a TODO list.</p>
<h2 id="so-graphql-right">So&hellip; GraphQL&hellip; right?</h2>
<p>In case you don&rsquo;t know, GraphQL is a query language for APIs that allows clients to request exactly the data they need. It provides efficient, flexible, and precise data fetching compared to traditional REST APIs.</p>
<p>This results in the following: imagine you have a complex entity on your backend.
Now, let&rsquo;s suppose you need different parts of that entity on the frontend, depending on the part of the application you are in.</p>
<p>On traditional REST APIs, you&rsquo;d need a different endpoint for each of those parts (unless you prefer to go full macho and bring your whole costly-to-compute complex entity each time).</p>
<p>On the other hand, with GraphQL you define the schema for your entity and how to fill each field. Then, with its query language, you can request just the data you need from the frontend client, without the need for multiple endpoints.</p>
<h2 id="lets-see-it-in-action">Let&rsquo;s see it in action</h2>
<p>For this project I&rsquo;ll be using:</p>
<ul>
<li><em>Express</em>: to serve the API,</li>
<li><em>GraphiQL</em>: as a query IDE for easier interaction with the API.</li>
</ul>
<p>If you want to follow along, you have all the code in my <a href="https://github.com/Alchemistst/todo-list-graphQL">repo</a>.</p>
<h3 id="defining-the-schema">Defining the schema</h3>
<p>We&rsquo;ll start by defining the schema for our TODOs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// Our GraphQL Schema
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="nx">buildSchema</span><span class="p">(</span><span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Todo {
</span></span></span><span class="line"><span class="cl"><span class="sb">    id: ID!
</span></span></span><span class="line"><span class="cl"><span class="sb">    content: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">    isDone: Boolean
</span></span></span><span class="line"><span class="cl"><span class="sb">    }
</span></span></span><span class="line"><span class="cl"><span class="sb">    
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Query {
</span></span></span><span class="line"><span class="cl"><span class="sb">    getTodo(id: ID!): Todo
</span></span></span><span class="line"><span class="cl"><span class="sb">    getAll: [Todo]
</span></span></span><span class="line"><span class="cl"><span class="sb">    }
</span></span></span><span class="line"><span class="cl"><span class="sb">      
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Mutation {
</span></span></span><span class="line"><span class="cl"><span class="sb">    createTodo(content: String): Todo
</span></span></span><span class="line"><span class="cl"><span class="sb">    updateTodo(id: ID!, content: String, isDone: Boolean): Todo
</span></span></span><span class="line"><span class="cl"><span class="sb">    deleteTodo(id: ID!): String
</span></span></span><span class="line"><span class="cl"><span class="sb">    }
</span></span></span><span class="line"><span class="cl"><span class="sb">`</span><span class="p">);</span>
</span></span></code></pre></div><p>In GraphQL we have three basic types: <strong>Query</strong>, <strong>Mutation</strong>, <strong>Object</strong> types.</p>
<ul>
<li><em>Object</em> types are the actual entities you want to expose to the world.</li>
<li><em>Query</em> are the methods you want to define to &ldquo;query&rdquo; (duh!) the schema.</li>
<li><em>Mutation</em> are the methods that changes the entities defined on your schema.</li>
</ul>
<h3 id="implementing-each-endpoint">Implementing each endpoint</h3>
<p>Now it&rsquo;s time to tell graphQL how to fill all those queries and mutations. For each of them, we&rsquo;ll define an endpoint on our Express server:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// Resolvers for each API endpoint
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getTodo</span><span class="p">({</span> <span class="nx">id</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`ID </span><span class="si">${</span><span class="nx">id</span><span class="si">}</span><span class="sb"> does not belong to any TODO kiddo!`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getAll</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">fakeDB</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">createTodo</span><span class="p">({</span> <span class="nx">content</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">{</span> <span class="nx">v4</span><span class="o">:</span> <span class="nx">uuidv4</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;uuid&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">uuidv4</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Todo</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">content</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">todo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">todo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">updateTodo</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">content</span><span class="p">,</span> <span class="nx">isDone</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`ID </span><span class="si">${</span><span class="nx">id</span><span class="si">}</span><span class="sb"> does not belong to any TODO kiddo!`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">content</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">isDone</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">isDone</span> <span class="o">=</span> <span class="nx">isDone</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">deleteTodo</span><span class="p">({</span> <span class="nx">id</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`ID </span><span class="si">${</span><span class="nx">id</span><span class="si">}</span><span class="sb"> does not belong to any TODO kiddo!`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="nx">fakeDB</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h3 id="cherry-on-the-cake-queries-and-mutations">Cherry on the cake: Queries and Mutations</h3>
<p>It&rsquo;s time! From graphiQL we can query the API. Let&rsquo;s create a TODO, we will run the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-graphql" data-lang="graphql"><span class="line"><span class="cl"><span class="kd">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nc">createTodo</span><span class="p">(</span><span class="py">content</span><span class="p">:</span><span class="w"> </span><span class="s">&#34;Feed Mr Mittens&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nc">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">content</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">isDone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Now, let&rsquo;s asume bringing the <em>content</em> of the TODO is a very expensive operation, and we really only need the <em>id</em> field after the creation. Well, no problem, we can change the query to this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-graphql" data-lang="graphql"><span class="line"><span class="cl"><span class="kd">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nc">createTodo</span><span class="p">(</span><span class="py">content</span><span class="p">:</span><span class="w"> </span><span class="s">&#34;Feed Mr Mittens&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nc">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>What was that? Do you only need the <em>id</em> and <em>isDone</em> fields when you fetch a TODO? Not a problem boss:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-graphql" data-lang="graphql"><span class="line"><span class="cl"><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">getTodo</span><span class="p">(</span><span class="py">id</span><span class="p">:</span><span class="w"> </span><span class="s">&#34;TODO_ID&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nc">id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">isDone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="the-takeaway">The Takeaway</h2>
<p>GraphQL allows for tons of flexibility when defining endpoints.
In particular, it shines when the data grows in complexity and it needs to be consumed from multiple sources. By defining just the data that we need, we can save unnecesary calls to other services to retrieve data that we know we are not going to use.</p>
<p>For now, this is all.
Signing out&hellip;</p>
]]></content>
        </item>
        
        <item>
            <title>[Nightly Dev Notes] Introduction</title>
            <link>http://localhost:1313/posts/hello-world/</link>
            <pubDate>Wed, 19 Jun 2024 00:26:31 +0200</pubDate>
            
            <guid>http://localhost:1313/posts/hello-world/</guid>
            <description>Hi there 游놓!
With this series of blog posts I&amp;rsquo;d like to experiment with different concepts and ideas. The goal is to make short posts with very specific concepts, isolated, without the need to build a full application to see them in action.
Why &amp;ldquo;Nightly&amp;rdquo;? Because most likely I&amp;rsquo;ll be doing this on my spare time, and that usualy only happens at night.
I hope you find this useful, maybe as an example, maybe as inspiration or maybe to motivate you to use the concepts I explain, making you realise they weren&amp;rsquo;t concepts so difficult after all.</description>
            <content type="html"><![CDATA[<p>Hi there 游놓!</p>
<p>With this series of blog posts I&rsquo;d like to experiment with different concepts and ideas. The goal is to make short posts with very specific concepts, isolated, without the need to build a full application to see them in action.</p>
<p>Why &ldquo;<em>Nightly</em>&rdquo;? Because most likely I&rsquo;ll be doing this on my spare time, and that usualy only happens at night.</p>
<p>I hope you find this useful, maybe as an example, maybe as inspiration or maybe to motivate you to use the concepts I explain, making you realise they weren&rsquo;t concepts so difficult after all.</p>
<p>For now, this is all.
Signing out&hellip;</p>
]]></content>
        </item>
        
    </channel>
</rss>
